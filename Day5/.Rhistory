# only need to run once if you don't have it
#install.packages("readxl")
#install.packages("sqldf")
install.packages("vader")
# install if you don't have it.
# only need to run this once, ever
# only need to run once if you don't have it
#install.packages("readxl")
#install.packages("sqldf")
#install.packages("vader")
# install if you don't have it.
# only need to run this once, ever
# don't show warnings while knitting
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
library(readxl); library(sqldf); library(vader)
vader::get_vader("The texture is terrible.  Fragrance is nice though.")
# constants
my_working_dir_mac <- "~/Desktop/MKTAnalytics/Data/Sephora" # working directory if on a Mac
my_working_dir_pc <- "C:\\Users\\rebec\\OneDrive\\Desktop\\MKTAnalytics\\Data\\Sephora" # if on a PC
myFile_products <- "products.csv"
myFile_reviews <- "reviews.csv"
myFile_authors <- "authors.csv"
# import data
setwd(getwd())
products <- read.csv(myFile_products)
reviews <- read.csv(myFile_reviews)
authors <- read.csv(myFile_authors)
# take a look at the last 6 rows of a table
tail(reviews)
# calculate VADER sentiments
# first, create a placeholder table, "d"
d <- sqldf("
SELECT  review_id AS ReviewId, review_text AS ReviewText,
0 AS Pos, 0 AS Neu, 0 AS Neg, 0 AS But, 0 AS Compound
FROM  reviews
")
# then, loop through each review and calculate VADER
for (i in 1:nrow(d)){ #will take ~2 to 10 min., literally
#for (i in 1:5){
voutput <- get_vader(d[i,2])
pos <- as.numeric(voutput["pos"])
neu <- as.numeric(voutput["neu"])
neg <- as.numeric(voutput["neg"])
but <- as.numeric(voutput["but_count"])
compound <- as.numeric(voutput["compound"])
# store the VADER scores inside the placeholder table "d"
d[i,3] <- pos
d[i,4] <- neu
d[i,5] <- neg
d[i,6] <- but
d[i,7] <- compound
}
# a sql INNER JOIN to merge reviews with the VADER sentiments we calculated
reviews <- sqldf(
"SELECT r.*, d.pos, d.neu, d.neg, d.but, d.compound
FROM   reviews r INNER JOIN d ON
r.review_id = d.ReviewId
")
# output the top 10 lines from a table
head(reviews, 10)
# average VADER sentiments for 1-star reviews
sqldf("
SELECT AVG(Pos) AS AvgPos, AVG(Neu) AS AvgNeu, AVG(Neg) AS AvgNeg,
AVG(But) AS AvgBut, AVG(Compound) AS AvgCompound
FROM  reviews
WHERE rating = 1
")
# average VADER sentiments for 5-star reviews
sqldf("
SELECT AVG(Pos) AS AvgPos, AVG(Neu) AS AvgNeu, AVG(Neg) AS AvgNeg,
AVG(But) AS AvgBut, AVG(Compound) AS AvgCompound
FROM  reviews
WHERE rating = 5
")
# t test. Are the sentiment scores statistically different, 5 star versus 1 star
t.test(reviews[reviews$rating == 5, ]$Compound, reviews[reviews$rating == 1, ]$Compound)
# what is the average length of reviews
# first calculate the lengths in characters
reviews$ReviewTextChars <- nchar(reviews$review_text)
# then take the mean
mean(reviews$ReviewTextChars)
# select the top 30 rows by review length in SQL
# in other words, here is the list of reviews with the 30 longest lengths
sqldf(" SELECT *
FROM reviews
ORDER BY ReviewTextChars DESC
LIMIT 30
")
# select the bottom 30 rows by review length in SQL
# in other words, here is the list of reviews with the shortest lengths
sqldf(" SELECT *
FROM reviews
ORDER BY ReviewTextChars ASC
LIMIT 30
")
setwd(my_working_dir_mac)
setwd(getwd())
write.csv(reviews, "reviews_updated.csv")
